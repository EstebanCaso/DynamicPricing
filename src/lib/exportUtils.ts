/**
 * Export and Share utilities for Analytics
 */

export interface AnalyticsExportData {
  userHotelName: string;
  dateRange: string;
  currency: string;
  totalDataPoints: number;
  competitorCount: number;
  marketPosition?: {
    rank: number;
    totalHotels: number;
    priceVsMarket: number;
    yourPrice: number;
    marketAverage: number;
  };
  historicalData: Array<{
    date: string;
    price: number;
    count: number;
  }>;
  filters: {
    roomType: string;
    range: number;
  };
}

/**
 * Generate CSV content from analytics data
 */
export function generateCSV(data: AnalyticsExportData): string {
  const headers = [
    'Hotel Name',
    'Date',
    'Average Price',
    'Bookings',
    'Currency',
    'Room Type Filter',
    'Date Range (days)'
  ];

  const rows = data.historicalData.map(item => [
    data.userHotelName,
    item.date,
    item.price.toFixed(2),
    item.count.toString(),
    data.currency,
    data.filters.roomType,
    data.filters.range.toString()
  ]);

  // Add summary row
  if (data.marketPosition) {
    rows.push([
      '--- MARKET POSITION SUMMARY ---',
      '',
      '',
      '',
      '',
      '',
      ''
    ]);
    rows.push([
      'Market Rank',
      `${data.marketPosition.rank} of ${data.marketPosition.totalHotels}`,
      'Your Avg Price',
      data.marketPosition.yourPrice.toFixed(2),
      'Market Avg',
      data.marketPosition.marketAverage.toFixed(2),
      `${data.marketPosition.priceVsMarket > 0 ? '+' : ''}${data.marketPosition.priceVsMarket.toFixed(1)}%`
    ]);
  }

  const csvContent = [
    headers.join(','),
    ...rows.map(row => row.map(field => `"${field}"`).join(','))
  ].join('\n');

  return csvContent;
}

/**
 * Download CSV file
 */
export function downloadCSV(data: AnalyticsExportData): void {
  const csvContent = generateCSV(data);
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  
  if (link.download !== undefined) {
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `analytics-report-${data.userHotelName.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}

/**
 * Generate summary report text
 */
export function generateSummaryReport(data: AnalyticsExportData): string {
  const locale = data.currency === 'USD' ? 'en-US' : 'es-MX';
  const fmt = new Intl.NumberFormat(locale, {
    style: 'currency',
    currency: data.currency,
    minimumFractionDigits: 0,
    maximumFractionDigits: 2,
  });

  const hasHistorical = data.historicalData && data.historicalData.length > 0;
  const minPrice = hasHistorical ? Math.min(...data.historicalData.map(d => d.price)) : 0;
  const maxPrice = hasHistorical ? Math.max(...data.historicalData.map(d => d.price)) : 0;
  const firstDate = hasHistorical ? data.historicalData[0].date : 'N/A';
  const lastDate = hasHistorical ? data.historicalData[data.historicalData.length - 1].date : 'N/A';

  const report = `
📊 ANALYTICS REPORT - ${data.userHotelName}
Generated: ${new Date().toLocaleString()}
Period: ${data.dateRange}
Currency: ${data.currency}

📈 DATA OVERVIEW:
• Total Data Points: ${data.totalDataPoints.toLocaleString()}
• Competitors Analyzed: ${data.competitorCount}
• Room Type Filter: ${data.filters.roomType}
• Date Range: ${data.filters.range} days

${data.marketPosition ? `
🏆 MARKET POSITION:
• Rank: #${data.marketPosition.rank} of ${data.marketPosition.totalHotels} hotels
• Your Average Price: ${fmt.format(data.marketPosition.yourPrice)}
• Market Average: ${fmt.format(data.marketPosition.marketAverage)}
• Price vs Market: ${data.marketPosition.priceVsMarket > 0 ? '+' : ''}${data.marketPosition.priceVsMarket.toFixed(1)}%
• Position Analysis: ${
  data.marketPosition.rank <= data.marketPosition.totalHotels / 3 
    ? 'Top tier positioning 🎯' 
    : data.marketPosition.rank <= (data.marketPosition.totalHotels * 2) / 3
    ? 'Mid-market position ⚖️'
    : 'Premium positioning 📊'
}
` : ''}

📊 HISTORICAL PERFORMANCE:
• Total data points: ${hasHistorical ? data.historicalData.length : 0}
• Date range: ${firstDate} to ${lastDate}
• Price range: ${fmt.format(minPrice)} - ${fmt.format(maxPrice)}
• Average bookings per day: ${hasHistorical ? (data.historicalData.reduce((sum, d) => sum + d.count, 0) / data.historicalData.length).toFixed(1) : '0.0'}

---
Report generated by Dynamic Pricing Analytics
`.trim();

  return report;
}

/**
 * Copy analytics summary to clipboard
 */
export async function copyToClipboard(data: AnalyticsExportData): Promise<boolean> {
  try {
    const summary = generateSummaryReport(data);
    await navigator.clipboard.writeText(summary);
    return true;
  } catch (err) {
    console.error('Failed to copy to clipboard:', err);
    return false;
  }
}

/**
 * Generate shareable URL with current analytics state
 */
export function generateShareableURL(data: AnalyticsExportData): string {
  const baseUrl = window.location.origin + window.location.pathname;
  const params = new URLSearchParams({
    hotel: data.userHotelName,
    currency: data.currency,
    roomType: data.filters.roomType,
    range: data.filters.range.toString(),
    shared: 'true'
  });

  return `${baseUrl}?${params.toString()}`;
}

/**
 * Share via Web Share API (mobile) or fallback to clipboard
 */
export async function shareAnalytics(data: AnalyticsExportData): Promise<boolean> {
  const shareData = {
    title: `${data.userHotelName} - Analytics Report`,
    text: `Market Position: #${data.marketPosition?.rank || 'N/A'} | Price vs Market: ${data.marketPosition?.priceVsMarket?.toFixed(1) || 'N/A'}%`,
    url: generateShareableURL(data)
  };

  // Try Web Share API first (mobile)
  if (navigator.share) {
    try {
      await navigator.share(shareData);
      return true;
    } catch (err) {
      if ((err as Error).name !== 'AbortError') {
        console.error('Web Share API failed:', err);
      }
    }
  }

  // Fallback: copy URL to clipboard
  try {
    await navigator.clipboard.writeText(shareData.url);
    return true;
  } catch (err) {
    console.error('Failed to copy share URL:', err);
    return false;
  }
}
